#!/usr/bin/env bash
set -euo pipefail
# Update and upgrade; fail the script on error
sudo apt update && sudo apt upgrade -y

sudo apt install -y curl shellcheck micro mc git build-essential make python3-full python3-pip python3-venv python-is-python3

# Install the packages that provide mDNS (Avahi) discovery support. This ensures
# avahi-daemon, supporting utilities, and the libc name service switch module
# for mDNS resolution are present before we manipulate the service state.
sudo apt install -y avahi-daemon avahi-utils libnss-mdns

# Ensure the libc resolver is configured to consult mDNS. We keep this logic in
# a helper so the behaviour is idempotent and easy to follow.
ensure_mdns_hosts_entry() {
    local NSSWITCH="/etc/nsswitch.conf"
    if [ ! -f "${NSSWITCH}" ]; then
        echo "Warning: ${NSSWITCH} not found; skipping mDNS resolver configuration" >&2
        return 0
    fi
    if grep -E '^[[:space:]]*hosts:.*mdns' "${NSSWITCH}" >/dev/null 2>&1; then
        return 0
    fi
    echo "Adding mDNS resolution to ${NSSWITCH}..." >&2
    sudo python3 - "$NSSWITCH" <<'PY'
import shutil
import sys
from pathlib import Path

path = Path(sys.argv[1])
backup = path.with_name(path.name + ".bak")
if not backup.exists():
    shutil.copy2(path, backup)

lines = path.read_text().splitlines()
preferred = ["files", "mdns4_minimal", "[NOTFOUND=return]", "dns", "mdns"]

for idx, line in enumerate(lines):
    if not line.startswith("hosts:"):
        continue
    prefix, sep, remainder = line.partition(":")
    tokens = remainder.split()
    for token in preferred:
        if token not in tokens:
            if token == "dns" and "mdns" in tokens:
                tokens.insert(tokens.index("mdns"), token)
            else:
                tokens.append(token)
    lines[idx] = f"{prefix}{sep}\t{' '.join(tokens)}"
    break
else:
    lines.append("hosts:\t" + " ".join(preferred))

path.write_text("\n".join(lines) + "\n")
PY
}

ensure_mdns_service() {
    if ! command -v systemctl >/dev/null 2>&1; then
        echo "systemctl not available; skipping Avahi enablement." >&2
        return 0
    fi
    if ! systemctl list-unit-files | grep -q '^avahi-daemon\.service'; then
        echo "avahi-daemon.service not present; skipping enablement." >&2
        return 0
    fi
    echo "Ensuring avahi-daemon.service is enabled and running..." >&2
    sudo systemctl unmask avahi-daemon.service >/dev/null 2>&1 || true
    if ! sudo systemctl enable avahi-daemon.service >/dev/null 2>&1; then
        echo "Warning: Failed to enable avahi-daemon.service; continuing" >&2
    fi
    if ! sudo systemctl restart avahi-daemon.service >/dev/null 2>&1; then
        if ! sudo systemctl start avahi-daemon.service >/dev/null 2>&1; then
            echo "Warning: Failed to start avahi-daemon.service; check logs." >&2
        fi
    fi
}

ensure_mdns_hosts_entry
ensure_mdns_service

# Try to install unzip; tolerate failure but send stdout to stderr so messages
# appear on the standard error stream like the original intent. Use an if
# wrapper so a failure doesn't cause the script to exit under `set -e`.
if ! sudo apt install -y unzip 1>&2; then
	echo "Warning: 'sudo apt install -y unzip' failed; continuing" >&2
fi

# Check whether Deno is installed; if not, run the official installer non-interactively.
if command -v deno >/dev/null 2>&1; then
	echo "Deno is already installed: $(command -v deno)"
	# If main.ts exists, run it with full permissions; otherwise exit.
	if [ -f "./psh/main.ts" ]; then
		# Install the /usr/bin/psh wrapper so the command is available globally.
		PSH_SRC="$(pwd)/psh/main.ts"
		if [ ! -f "${PSH_SRC}" ]; then
			echo "Expected ${PSH_SRC} to exist but it does not. Aborting." >&2
			exit 1
		fi
		# Ensure a copy of the deno binary exists in /usr/bin so the wrapper can
		# always call `deno` from a predictable path. Use the currently available
		# deno executable (command -v deno) and copy it to /usr/bin/deno.
		DENO_PATH=$(command -v deno || true)
		if [ -n "${DENO_PATH}" ]; then
			echo "Copying deno binary from ${DENO_PATH} -> /usr/bin/deno (requires sudo)..."
			sudo cp "${DENO_PATH}" /usr/bin/deno
			sudo chmod a+x /usr/bin/deno
		fi
		chmod a+x "${PSH_SRC}" || true
		echo "Installing psh wrapper -> /usr/bin/psh (requires sudo)..."
	sudo tee /usr/bin/psh >/dev/null <<PSH
#!/usr/bin/env bash
exec deno run -A '${PSH_SRC}' "\$@"
PSH
		sudo chmod a+x /usr/bin/psh
	echo "Launching ./psh/main.ts with deno run -A (install)..."
	# Run the installer but don't use `exec` here: `exec` would replace
	# the calling shell and the following `exec ... setup` would never run.
	deno run -A "${PSH_SRC}" install >&2 || true
	# Replace the shell with the setup run so it becomes the final process.
	exec deno run -A "${PSH_SRC}" setup
	else
		echo "File ./psh/main.ts not found. Exiting." >&2
		exit 1
	fi
fi

# Ensure curl is available
if ! command -v curl >/dev/null 2>&1; then
	echo "curl is required to install Deno but was not found. Please install curl and re-run this script." >&2
	exit 1
fi

echo "Deno not found. Installing Deno (non-interactive, auto-yes)..."
# Run the official Deno install script with auto-confirmation (--yes)
curl -fsSL https://deno.land/install.sh | sh -s -- --yes

# Detect common install locations and remind the user to add to PATH if necessary
if [ -d "$HOME/.deno/bin" ]; then
	DENO_BIN="$HOME/.deno/bin"
elif [ -d "$HOME/.local/share/deno/bin" ]; then
	DENO_BIN="$HOME/.local/share/deno/bin"
else
	DENO_BIN=""
fi

if [ -n "${DENO_BIN}" ]; then
	echo "Deno installed to $DENO_BIN"
	if ! echo "$PATH" | tr ':' '\n' | grep -qx "$DENO_BIN"; then
		echo "Warning: $DENO_BIN is not on your PATH. You may want to add:"
		echo "  export PATH=\"$DENO_BIN:\$PATH\""
	fi
fi

echo "Deno installation step finished."

# If installation succeeded and deno is available in PATH, attempt to run main.ts
if command -v deno >/dev/null 2>&1; then
	if [ -f "./psh/main.ts" ]; then
	echo "Launching ./psh/main.ts with deno run -A..."
	# Run the installer but don't use `exec` here: `exec` would replace
	# the calling shell and the following `exec ... setup` would never run.
	deno run -A ./psh/main.ts install >&2 || true
	# Replace the shell with the setup run so it becomes the final process.
	exec deno run -A ./psh/main.ts setup
	else
		echo "File ./psh/main.ts not found. Installation complete."
	fi
else
	echo "Deno was installed but is not on PATH. Add the Deno bin directory to your PATH and re-run the script to launch ./psh/main.ts." >&2
fi
