#!/usr/bin/env bash
set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
REPO_ROOT="$(cd "${SCRIPT_DIR}/.." && pwd)"

ENV_FILE="${REPO_ROOT}/env/psyched_env.sh"
if [[ -f "${ENV_FILE}" ]]; then
  # shellcheck disable=SC1090
  source "${ENV_FILE}"
fi

WORKSPACE_DIR="${PSYCHED_WORKSPACE_DIR:-${REPO_ROOT}/work}"
SRC_DIR="${PSYCHED_WORKSPACE_SRC:-${WORKSPACE_DIR}/src}"
BUILD_DIR="${PSYCHED_WORKSPACE_BUILD:-${WORKSPACE_DIR}/build}"
INSTALL_DIR="${PSYCHED_WORKSPACE_INSTALL:-${WORKSPACE_DIR}/install}"
LOG_DIR="${PSYCHED_WORKSPACE_LOG:-${WORKSPACE_DIR}/log}"

if [[ -z "${WORKSPACE_DIR}" || "${WORKSPACE_DIR}" == "/" ]]; then
  echo "Refusing to operate on empty or root workspace directory." >&2
  exit 1
fi

echo "==> Preparing workspace directory: ${WORKSPACE_DIR}"
if [[ -d "${WORKSPACE_DIR}" ]]; then
  echo "    Removing existing workspace contents"
  rm -rf "${WORKSPACE_DIR}"
fi

mkdir -p "${SRC_DIR}" "${BUILD_DIR}" "${INSTALL_DIR}" "${LOG_DIR}"

printf '*\n!.gitignore\n' > "${WORKSPACE_DIR}/.gitignore"
printf '*\n!.gitignore\n' > "${SRC_DIR}/.gitignore"

# Remove deprecated top-level directories if they still exist.
for legacy in "${REPO_ROOT}/src" "${REPO_ROOT}/build" "${REPO_ROOT}/install"; do
  if [[ -e "${legacy}" ]]; then
    echo "    Removing legacy directory ${legacy}"
    rm -rf "${legacy}"
  fi
done

# Module and service setup commands re-create any required symlinks. Leaving
# the workspace empty here prevents disabled targets from polluting builds.
echo "==> Skipping automatic package symlink creation (handled by module/service setup)"
echo "âœ“ Workspace ready at ${WORKSPACE_DIR}"
