#!/usr/bin/env bash
set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
REPO_ROOT="$(cd "${SCRIPT_DIR}/.." && pwd)"

ENV_FILE="${REPO_ROOT}/workspace_env.sh"
if [[ -f "${ENV_FILE}" ]]; then
  # shellcheck disable=SC1090
  source "${ENV_FILE}"
fi

WORKSPACE_DIR="${PSYCHED_WORKSPACE_DIR:-${REPO_ROOT}/work}"
SRC_DIR="${PSYCHED_WORKSPACE_SRC:-${WORKSPACE_DIR}/src}"
BUILD_DIR="${PSYCHED_WORKSPACE_BUILD:-${WORKSPACE_DIR}/build}"
INSTALL_DIR="${PSYCHED_WORKSPACE_INSTALL:-${WORKSPACE_DIR}/install}"
LOG_DIR="${PSYCHED_WORKSPACE_LOG:-${WORKSPACE_DIR}/log}"

if [[ -z "${WORKSPACE_DIR}" || "${WORKSPACE_DIR}" == "/" ]]; then
  echo "Refusing to operate on empty or root workspace directory." >&2
  exit 1
fi

echo "==> Preparing workspace directory: ${WORKSPACE_DIR}"
if [[ -d "${WORKSPACE_DIR}" ]]; then
  echo "    Removing existing workspace contents"
  rm -rf "${WORKSPACE_DIR}"
fi

mkdir -p "${SRC_DIR}" "${BUILD_DIR}" "${INSTALL_DIR}" "${LOG_DIR}"

# Link the .cargo/config.toml to the workspace so that packages that are only linked to the workspace work.
mkdir -p "${WORKSPACE_DIR}/.cargo"
ln -sf "${REPO_ROOT}/.cargo/config.toml" "${WORKSPACE_DIR}/.cargo/config.toml"

printf '*\n!.gitignore\n' > "${WORKSPACE_DIR}/.gitignore"
printf '*\n!.gitignore\n' > "${SRC_DIR}/.gitignore"

echo "==> Setting up ROS 2 Rust support"
"${REPO_ROOT}/tools/bootstrap/setup_ros_rust_bindings.sh"

# Remove deprecated top-level directories if they still exist.
for legacy in "${REPO_ROOT}/src" "${REPO_ROOT}/build" "${REPO_ROOT}/install"; do
  if [[ -e "${legacy}" ]]; then
    echo "    Removing legacy directory ${legacy}"
    rm -rf "${legacy}"
  fi
done

# Re-establish local package symlinks inside the workspace src directory.
shopt -s nullglob

declare -A LINKED_PACKAGES=()

link_package() {
  local name="$1"
  local target="$2"

  if [[ -z "${name}" ]]; then
    return
  fi

  if [[ -n "${LINKED_PACKAGES[${name}]:-}" ]]; then
    if [[ "${LINKED_PACKAGES[${name}]}" != "${target}" ]]; then
      echo "    Skipping ${name} (already linked to ${LINKED_PACKAGES[${name}]})"
    fi
    return
  fi

  if [[ ! -d "${target}" ]]; then
    return
  fi

  if [[ ! -f "${target}/Cargo.toml" && ! -f "${target}/package.xml" ]]; then
    return
  fi

  local link="${SRC_DIR}/${name}"
  if [[ -e "${link}" && ! -L "${link}" ]]; then
    echo "    Skipping ${name} (destination ${link} exists and is not a symlink)"
    return
  fi

  rm -f "${link}"
  ln -s "${target}" "${link}"
  LINKED_PACKAGES["${name}"]="${target}"
  echo "    ${link} -> ${target}"
}

echo "==> Re-establishing local package symlinks"

for package_dir in "${REPO_ROOT}/packages"/*; do
  base="$(basename "${package_dir}")"
  [[ "${base}" == .* ]] && continue
  link_package "${base}" "${package_dir}"
done

for module_package in "${REPO_ROOT}"/modules/*/packages/*; do
  base="$(basename "${module_package}")"
  link_package "${base}" "${module_package}"
done

CONFIG_PATH="${REPO_ROOT}/.cargo/config.toml"
if [[ -f "${CONFIG_PATH}" ]]; then
  echo "==> Clearing existing Cargo patch configuration"
  : > "${CONFIG_PATH}"
else
  mkdir -p "${REPO_ROOT}/.cargo"
  touch "${CONFIG_PATH}"
fi

echo "==> Refreshing Cargo patch configuration"
if command -v psh >/dev/null 2>&1; then
  if ! psh cargo patch; then
    echo "    psh cargo patch failed; falling back to cargo run" >&2
    cargo run --quiet --manifest-path "${REPO_ROOT}/psh/Cargo.toml" -- cargo patch
  fi
else
  cargo run --quiet --manifest-path "${REPO_ROOT}/psh/Cargo.toml" -- cargo patch
fi

echo "âœ“ Workspace ready at ${WORKSPACE_DIR}"
