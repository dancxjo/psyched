{
  "version": 1,
  "actions": [
    {
      "name": "recall_text",
      "description": "Call /memory/recall with a text query to retrieve related memories.",
      "kind": "call-service",
      "defaults": {
        "service": "/memory/recall",
        "service_type": "memory_interfaces/srv/Recall",
        "arguments": {
          "kind": "episodic",
          "text": "",
          "limit": 5,
          "embedding": []
        },
        "argument_map": {
          "text": "text",
          "limit": "limit",
          "kind": "kind"
        }
      },
      "parameters": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string",
            "minLength": 1,
            "description": "Natural language query used to derive the recall vector."
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "maximum": 50,
            "description": "Maximum number of memories to return (default 5)."
          },
          "kind": {
            "type": "string",
            "description": "Memory collection kind when recalling (default 'episodic')."
          }
        },
        "required": [
          "text"
        ],
        "additionalProperties": false
      },
      "returns": {
        "type": "object",
        "properties": {
          "result": {
            "type": "object",
            "description": "Raw service response structure."
          }
        },
        "additionalProperties": true
      }
    },
    {
      "name": "memorize_event",
      "description": "Call /memory/memorize with a prepared MemoryEvent payload.",
      "kind": "call-service",
      "defaults": {
        "service": "/memory/memorize",
        "service_type": "memory_interfaces/srv/Memorize",
        "arguments": {
          "event": {
            "header": {
              "frame_id": "memory",
              "stamp": {
                "sec": 0,
                "nanosec": 0
              }
            },
            "kind": "generic",
            "json_data": "{}",
            "embedding": []
          },
          "flush": true
        },
        "argument_map": {
          "event": "event",
          "flush": "flush"
        }
      },
      "parameters": {
        "type": "object",
        "properties": {
          "event": {
            "type": "object",
            "description": "Complete MemoryEvent structure (header, kind, json_data, optional embedding)."
          },
          "flush": {
            "type": "boolean",
            "description": "Set to false to batch vector upserts instead of forcing immediate flush."
          }
        },
        "required": [
          "event"
        ],
        "additionalProperties": false
      },
      "returns": {
        "type": "object",
        "properties": {
          "result": {
            "type": "object",
            "description": "Raw response containing memory_id and vector_id."
          }
        },
        "additionalProperties": true
      }
    }
  ]
}
