name = "voice"
description = "Text-to-speech pipeline"

[pilot]
display_name = "Voice"
description = "Text-to-speech synthesis"

[[pilot.topics]]
name = "/voice"
type = "std_msgs/msg/String"
access = "rw"
presentation = "text"
qos = { history = "keep_last", depth = 10, reliability = "reliable", durability = "volatile" }

[[pilot.topics]]
name = "/voice/interrupt"
type = "std_msgs/msg/Empty"
access = "wo"
presentation = "button"
qos = { history = "keep_last", depth = 1, reliability = "reliable", durability = "volatile" }

[[actions]]
type = "link_packages"
packages = ["voice", "psyched_msgs"]

[[actions]]
type = "apt_install"
packages = ["espeak-ng", "mbrola", "mbrola-en1", "ffmpeg", "fortune-mod", "fortunes", "fortunes-min"]
update = true

[[actions]]
type = "pip_install"
packages = ["pyttsx3"]
import_check = ["pyttsx3"]
break_system = true

[systemd]
description = "Psyched Voice"
after = ["network.target"]
restart = "on-failure"
restart_sec = 4
launch_command = """
set -euo pipefail
REPO_DIR="$(pwd)"
HOST_SHORT="${HOST:-$(hostname -s)}"
CONF_FILE=""
if [ -f "${REPO_DIR}/hosts/${HOST_SHORT}/config/voice.env" ]; then
  CONF_FILE="${REPO_DIR}/hosts/${HOST_SHORT}/config/voice.env"
elif [ -f "${REPO_DIR}/hosts/$(hostname -s)/config/voice.env" ]; then
  CONF_FILE="${REPO_DIR}/hosts/$(hostname -s)/config/voice.env"
elif [ -f "${REPO_DIR}/config/voice.env" ]; then
  CONF_FILE="${REPO_DIR}/config/voice.env"
fi
if [ -n "$CONF_FILE" ] && [ -f "$CONF_FILE" ]; then
  source "$CONF_FILE"
fi
ENGINE_VAL="${VOICE_ENGINE:-espeak}"
TOPIC_VAL="${VOICE_TOPIC:-/voice}"
PAUSE_VAL="${VOICE_PAUSE:-${VOICE_INTERRUPT:-/voice/interrupt}}"
RESUME_VAL="${VOICE_RESUME:-/voice/resume}"
CLEAR_VAL="${VOICE_CLEAR:-/voice/clear}"
INTERRUPT_VAL="${VOICE_INTERRUPT:-/voice/interrupt}"
MODEL_VAL="${VOICE_MODEL:-en_US-ryan-high}"
VOICES_DIR_VAL="${PIPER_VOICES_DIR:-${REPO_DIR}/voices}"
exec ros2 launch voice voice.launch.py \
  engine:="${ENGINE_VAL}" \
  topic:="${TOPIC_VAL}" \
  pause_topic:="${PAUSE_VAL}" \
  resume_topic:="${RESUME_VAL}" \
  clear_topic:="${CLEAR_VAL}" \
  interrupt_topic:="${INTERRUPT_VAL}" \
  model:="${MODEL_VAL}" \
  voices_dir:="${VOICES_DIR_VAL}"
"""
shutdown_command = """
set -euo pipefail
ros2 topic pub /voice/say std_msgs/msg/String "{data: 'Goodbye everybody! I've got to go.'}" --once || true
PATTERN="ros2 launch voice voice.launch.py"
TIMEOUT=${TIMEOUT:-10}
mapfile -t pids < <(pgrep -f "$PATTERN" || true)
if [ ${#pids[@]} -eq 0 ]; then
  echo "[voice/shutdown] No matching processes found for pattern: $PATTERN"
  exit 0
fi

echo "[voice/shutdown] Stopping ${#pids[@]} process(es) for: $PATTERN (SIGTERM)"
for pid in "${pids[@]}"; do
  if [ "$pid" -ne $$ ]; then
    kill -TERM "$pid" 2>/dev/null || true
  fi
done

for ((i=0; i<TIMEOUT; i++)); do
  sleep 1
  mapfile -t still_alive < <(pgrep -f "$PATTERN" || true)
  if [ ${#still_alive[@]} -eq 0 ]; then
    echo "[voice/shutdown] All processes stopped"
    exit 0
  fi
done

echo "[voice/shutdown] Forcing stop (SIGKILL) for remaining processes"
for pid in "${still_alive[@]}"; do
  if [ -n "$pid" ]; then
    kill -KILL "$pid" 2>/dev/null || true
  fi
done
"""
