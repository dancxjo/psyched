# Generated by psh systemd
[Unit]
Description=Psyched Pilot UI
After=network-online.target
Wants=network-online.target

[Service]
Type=simple
WorkingDirectory=/home/pete/psyched
Environment=HOST=cerebellum
Environment=PSH_MODULE_NAME=pilot
Environment=PSH_MODULE_CONFIG=/home/pete/psyched/hosts/cerebellum/config/pilot.yaml
ExecStart=/home/pete/psyched/tools/systemd_entrypoint.sh bash -lc "set -euo pipefail\nWEB_PORT_VAL=\"${PILOT_WEB_PORT:-8080}\"\nWEBSOCKET_PORT_VAL=\"${PILOT_WS_PORT:-8081}\"\nCMD_VEL_TOPIC_VAL=\"${PILOT_CMD_VEL_TOPIC:-/cmd_vel}\"\nHOST_VAL=\"${PILOT_HOST:-0.0.0.0}\"\nVOICE_TOPIC_VAL=\"${PILOT_VOICE_TOPIC:-/voice}\"\nGPS_FIX_TOPIC_VAL=\"${PILOT_GPS_FIX_TOPIC:-/gps/fix}\"\nCONV_TOPIC_VAL=\"${PILOT_CONVERSATION_TOPIC:-/conversation}\"\nENABLE_HTTP_VAL=\"${PILOT_ENABLE_HTTP:-true}\"\nENABLE_WS_VAL=\"${PILOT_ENABLE_WS:-false}\"\nRUN_SEPARATE_WS_VAL=\"${PILOT_RUN_SEPARATE_WS:-true}\"\nexport PILOT_WEB_PORT=\"$WEB_PORT_VAL\"\nexport PILOT_WS_PORT=\"$WEBSOCKET_PORT_VAL\"\nexport PILOT_CMD_VEL_TOPIC=\"$CMD_VEL_TOPIC_VAL\"\nexport PILOT_HOST=\"$HOST_VAL\"\nexport PILOT_VOICE_TOPIC=\"$VOICE_TOPIC_VAL\"\nexport PILOT_GPS_FIX_TOPIC=\"$GPS_FIX_TOPIC_VAL\"\nexport PILOT_CONVERSATION_TOPIC=\"$CONV_TOPIC_VAL\"\nexport PILOT_ENABLE_HTTP=\"$ENABLE_HTTP_VAL\"\nexport PILOT_ENABLE_WS=\"$ENABLE_WS_VAL\"\nexport PILOT_RUN_SEPARATE_WS=\"$RUN_SEPARATE_WS_VAL\"\necho \"[pilot/launch] Starting pilot web interface...\"\necho \"[pilot/launch] Web: http://${HOST_VAL}:${WEB_PORT_VAL}\"\necho \"[pilot/launch] WebSocket: ws://${HOST_VAL}:${WEBSOCKET_PORT_VAL}\"\necho \"[pilot/launch] Publishing to: ${CMD_VEL_TOPIC_VAL}\"\nexec pilot_backend --host \"${HOST_VAL}\" --port \"${WEB_PORT_VAL}\" --modules-root \"$(dirname \"$PWD\")\" --log-level \"info\""
ExecStop=/home/pete/psyched/tools/systemd_entrypoint.sh bash -lc "set -euo pipefail\nPATTERN=\"pilot_backend\"\nTIMEOUT=${TIMEOUT:-10}\nWEB_PORT=${PILOT_WEB_PORT:-8080}\nWS_PORT=${PILOT_WS_PORT:-8081}\nmapfile -t pids < <(pgrep -f \"$PATTERN\" || true)\nif [ ${#pids[@]} -gt 0 ]; then\n  echo \"[pilot/shutdown] Stopping ${#pids[@]} process(es) for: $PATTERN (SIGTERM)\"\n  for pid in \"${pids[@]}\"; do\n    if [ \"$pid\" -ne $$ ]; then\n      kill -TERM \"$pid\" 2>/dev/null || true\n    fi\n  done\n  for ((i=0; i<TIMEOUT; i++)); do\n    sleep 1\n    mapfile -t still_alive < <(pgrep -f \"$PATTERN\" || true)\n    if [ ${#still_alive[@]} -eq 0 ]; then\n      echo \"[pilot/shutdown] All processes stopped\"\n      break\n    fi\n  done\n  if [ ${#still_alive[@]} -gt 0 ]; then\n    echo \"[pilot/shutdown] Forcing stop (SIGKILL) for remaining processes\"\n    for pid in \"${still_alive[@]}\"; do\n      if [ -n \"$pid\" ]; then\n        kill -KILL \"$pid\" 2>/dev/null || true\n      fi\n    done\n  fi\nelse\n  echo \"[pilot/shutdown] No matching processes found for pattern: $PATTERN\"\nfi\nfor port in \"$WEB_PORT\" \"$WS_PORT\"; do\n  pids_on_port=$(ss -ltnp 2>/dev/null | awk -v p=\":${port}\" '$4 ~ p {print $7}' | sed -E 's/.*pid=([0-9]+).*/\\1/' | sort -u)\n  if [ -n \"$pids_on_port\" ]; then\n    echo \"[pilot/shutdown] Killing PIDs on port ${port}: $pids_on_port\"\n    kill -TERM $pids_on_port 2>/dev/null || true\n  else\n    echo \"[pilot/shutdown] No process listening on port ${port}\"\n  fi\ndone"
Restart=on-failure
RestartSec=4
User=pete
KillMode=control-group
TimeoutStopSec=20

[Install]
WantedBy=multi-user.target
