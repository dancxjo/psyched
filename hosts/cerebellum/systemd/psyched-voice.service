# Generated by psh systemd
[Unit]
Description=Psyched Voice
After=network.target
Wants=network-online.target

[Service]
Type=simple
WorkingDirectory=/home/pete/psyched
Environment=HOST=cerebellum
Environment=PSH_MODULE_NAME=voice
Environment=PSH_MODULE_CONFIG=/home/pete/psyched/hosts/cerebellum/config/voice.yaml
ExecStart=/home/pete/psyched/tools/systemd_entrypoint.sh bash -lc "set -euo pipefail\nREPO_DIR=\"$$(pwd)\"\nHOST_SHORT=\"$${HOST:-$$(hostname -s)}\"\nCONF_FILE=\"\"\nif [ -f \"$${REPO_DIR}/hosts/$${HOST_SHORT}/config/voice.env\" ]; then\n  CONF_FILE=\"$${REPO_DIR}/hosts/$${HOST_SHORT}/config/voice.env\"\nelif [ -f \"$${REPO_DIR}/hosts/$$(hostname -s)/config/voice.env\" ]; then\n  CONF_FILE=\"$${REPO_DIR}/hosts/$$(hostname -s)/config/voice.env\"\nelif [ -f \"$${REPO_DIR}/config/voice.env\" ]; then\n  CONF_FILE=\"$${REPO_DIR}/config/voice.env\"\nfi\nif [ -n \"$$CONF_FILE\" ] && [ -f \"$$CONF_FILE\" ]; then\n  source \"$$CONF_FILE\"\nfi\nENGINE_VAL=\"$${VOICE_ENGINE:-espeak}\"\nTOPIC_VAL=\"$${VOICE_TOPIC:-/voice}\"\nPAUSE_VAL=\"$${VOICE_PAUSE:-$${VOICE_INTERRUPT:-/voice/interrupt}}\"\nRESUME_VAL=\"$${VOICE_RESUME:-/voice/resume}\"\nCLEAR_VAL=\"$${VOICE_CLEAR:-/voice/clear}\"\nINTERRUPT_VAL=\"$${VOICE_INTERRUPT:-/voice/interrupt}\"\nMODEL_VAL=\"$${VOICE_MODEL:-en_US-ryan-high}\"\nVOICES_DIR_VAL=\"$${PIPER_VOICES_DIR:-$${REPO_DIR}/voices}\"\nexec ros2 launch voice voice.launch.py engine:=\"$${ENGINE_VAL}\" topic:=\"$${TOPIC_VAL}\" pause_topic:=\"$${PAUSE_VAL}\" resume_topic:=\"$${RESUME_VAL}\" clear_topic:=\"$${CLEAR_VAL}\" interrupt_topic:=\"$${INTERRUPT_VAL}\" model:=\"$${MODEL_VAL}\" voices_dir:=\"$${VOICES_DIR_VAL}\""
ExecStop=/home/pete/psyched/tools/systemd_entrypoint.sh bash -lc "set -euo pipefail\nros2 topic pub /voice/say std_msgs/msg/String \"{data: 'Goodbye everybody! I've got to go.'}\" --once || true\nPATTERN=\"ros2 launch voice voice.launch.py\"\nTIMEOUT=$${TIMEOUT:-10}\nmapfile -t pids < <(pgrep -f \"$$PATTERN\" || true)\nif [ $${#pids[@]} -eq 0 ]; then\n  echo \"[voice/shutdown] No matching processes found for pattern: $$PATTERN\"\n  exit 0\nfi\n\necho \"[voice/shutdown] Stopping $${#pids[@]} process(es) for: $$PATTERN (SIGTERM)\"\nfor pid in \"$${pids[@]}\"; do\n  if [ \"$$pid\" -ne $$$$ ]; then\n    kill -TERM \"$$pid\" 2>/dev/null || true\n  fi\ndone\n\nfor ((i=0; i<TIMEOUT; i++)); do\n  sleep 1\n  mapfile -t still_alive < <(pgrep -f \"$$PATTERN\" || true)\n  if [ $${#still_alive[@]} -eq 0 ]; then\n    echo \"[voice/shutdown] All processes stopped\"\n    exit 0\n  fi\ndone\n\necho \"[voice/shutdown] Forcing stop (SIGKILL) for remaining processes\"\nfor pid in \"$${still_alive[@]}\"; do\n  if [ -n \"$$pid\" ]; then\n    kill -KILL \"$$pid\" 2>/dev/null || true\n  fi\ndone"
Restart=on-failure
RestartSec=4
User=pete
KillMode=control-group
TimeoutStopSec=20

[Install]
WantedBy=multi-user.target
